[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[project]
name = "bistoury"
version = "0.1.0"
description = "LLM-Driven Cryptocurrency Trading System"
authors = [{name = "Bistoury Team"}]
readme = "README.md"
requires-python = ">=3.9"
dependencies = [
    "pydantic>=2.10.3",
    "duckdb>=1.1.3",
    "langchain>=0.2",
    "langchain-openai>=0.1",
    "langchain-anthropic>=0.1",
    "click>=8.1.7",
    "rich>=13.0",
    "python-dotenv>=1.0.0",
    "httpx>=0.27",
    "websockets>=12.0",
    "aiofiles>=24.0",
    "pyyaml>=6.0",
    "pandas>=2.2.3",
    "numpy>=1.24",
    "schedule>=1.2.2",
    "sqlalchemy>=2.0.36",
    "hyperliquid-python-sdk>=0.15.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.0",
    "pytest-asyncio>=0.23",
    "pytest-cov>=5.0",
    "black>=24.0",
    "ruff>=0.4",
    "mypy>=1.10",
    "pre-commit>=3.7",
    "pytest-mock>=3.14",
]

[project.scripts]
bistoury = "bistoury.cli:main"

# Keep Poetry config for Poetry users
[tool.poetry]
name = "bistoury"
version = "0.1.0"
description = "LLM-Driven Cryptocurrency Trading System"
authors = ["Bistoury Team"]
readme = "README.md"
packages = [
    { include = "bistoury", from = "src" }
]

[tool.poetry.dependencies]
python = "^3.9"
pydantic = "^2.10.3"
duckdb = "^1.1.3"
langchain = "^0.2"
langchain-openai = "^0.1"
langchain-anthropic = "^0.1"
click = "^8.1.7"
rich = "^13.0"
python-dotenv = "^1.0.0"
httpx = "^0.27"
websockets = "^12.0"
aiofiles = "^24.0"
pyyaml = "^6.0"
pandas = "^2.2.3"
numpy = "^1.24"
schedule = "^1.2.2"
sqlalchemy = "^2.0.36"
hyperliquid-python-sdk = "^0.15.0"

[tool.poetry.group.dev.dependencies]
pytest = "^8.0"
pytest-asyncio = "^0.23"
pytest-cov = "^5.0"
black = "^24.0"
ruff = "^0.4"
mypy = "^1.10"
pre-commit = "^3.7"
pytest-mock = "^3.14"

[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
line-length = 88
target-version = "py39"
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.mypy]
python_version = "3.9"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "hyperliquid.*",
    "duckdb.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = [
    "tests",
]
python_files = [
    "test_*.py",
    "*_test.py",
]
python_classes = [
    "Test*",
]
python_functions = [
    "test_*",
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
] 